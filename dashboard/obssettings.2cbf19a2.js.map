{"mappings":"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","sources":["src/dashboard/OBSSettings.tsx","node_modules/@nodecg/react-hooks/esm/index.js","node_modules/@nodecg/react-hooks/src/index.ts","node_modules/@nodecg/react-hooks/esm/use-replicant.js","node_modules/@nodecg/react-hooks/src/use-replicant.ts","node_modules/klona/json/index.js","node_modules/@nodecg/react-hooks/esm/use-listen-for.js","node_modules/@nodecg/react-hooks/src/use-listen-for.ts","src/helpers/hooks.ts"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components'\r\nimport NodeCG from '@nodecg/types';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { InputCheckbox, InputSubheader, InputRow, InputLabel, InputSection, InputText, InputButton, ErrorText } from './components/Layout';\r\nimport { useReplicant } from '@nodecg/react-hooks';\r\nimport { ObsData } from 'schemas';\r\nimport { useObsConnectionStatus } from '../helpers/hooks'\r\n\r\nexport function OBSSettings() {\r\n\t\r\n\tconst [ obsSettings, SetObsSettings ] = useReplicant<ObsData>('obssettings', { \r\n\t\tbundle: 'squidwest-layout-controls',\r\n\t\tdefaultValue: { serverIp: \"\", serverPort: \"\", autoConnect: false}\r\n\t});\r\n\r\n\tconst [ serverIp, setServerIp ] = useState(\"\");\r\n\tconst [ serverPort, setServerPort ] = useState(\"\");\r\n\tconst [ serverPassword, setServerPassword ] = useState(\"\");\r\n\tconst [ autoConnect, setAutoConnect ] = useState(false);\r\n\r\n\tconst [ statusText, setStatusText ] = useState(\"\");\r\n\r\n\tconst onDisconnect = useCallback(() => {\r\n\t\tsetStatusText(\"OBS was disconnected.\");\r\n\t}, []);\r\n\r\n\tconst connected = useObsConnectionStatus(nodecg, { onDisconnect: onDisconnect});\r\n\t\r\n\r\n\tconst setObsConnection = useCallback((connect: boolean, settings: ObsData) => {\r\n\t\tif(!settings) return;\r\n\r\n\t\tsetStatusText(\"Connecting...\");\r\n\r\n\t\tnodecg.sendMessage('setObsConnection', { connect: connect, settings: settings })\r\n\t\t\t.then(() => {\r\n\t\t\t\tsetStatusText(\"OBS Connection Successful!\");\r\n\t\t\t}).catch((error: Error) => {\r\n\r\n\t\t\t\t//Simplify some common errors\r\n\t\t\t\tif(error.message.includes(\"ECONNREFUSED\")) {\r\n\t\t\t\t\tsetStatusText(\"OBS Connection Failed: Failed to connect. Is OBS open with the WebSocket Server enabled?\");\r\n\t\t\t\t}\r\n\t\t\t\telse if(error.message.includes(\"ETIMEDOUT\")) {\r\n\t\t\t\t\tsetStatusText(\"OBS Connection Failed: Timed out. Double check your information matches what is in OBS!\");\r\n\t\t\t\t}\r\n\t\t\t\telse if(error.message.includes(\"authentication is required\")) {\r\n\t\t\t\t\tsetStatusText(\"OBS Connection Failed: Missing authentication. Check that you've filled out the password field!\");\r\n\t\t\t\t}\r\n\t\t\t\telse if(error.message.includes(\"Authentication failed.\")) {\r\n\t\t\t\t\tsetStatusText(\"OBS Connection Failed: Authentication failed. Verify that your password matches the one in OBS!\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsetStatusText(`${error.message}`);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t})\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tnodecg.readReplicant<ObsData>('obssettings', (obsData) => {\r\n\t\t\tif(!obsData) return;\r\n\r\n\t\t\tif(!connected && obsData.autoConnect) {\r\n\t\t\t\tsetObsConnection(true, obsData);\r\n\t\t\t}\r\n\t\t})\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif(!obsSettings) return;\r\n\r\n\t\tsetServerIp(obsSettings.serverIp);\r\n\t\tsetServerPort(obsSettings.serverPort);\r\n\r\n\t\tif(obsSettings.serverPassword) {\r\n\t\t\tsetServerPassword(obsSettings.serverPassword);\r\n\t\t}\r\n\t\t\r\n\t\tsetAutoConnect(obsSettings.autoConnect);\r\n\t}, [obsSettings]);\r\n\r\n\tconst updateObsSettings = useCallback(() => {\r\n\t\tlet newObsSettings: ObsData = {\r\n\t\t\tserverIp: serverIp,\r\n\t\t\tserverPort: serverPort,\r\n\t\t\tserverPassword: serverPassword,\r\n\t\t\tautoConnect: autoConnect\r\n\t\t};\r\n\r\n\t\tSetObsSettings(newObsSettings);\r\n\t}, [serverIp, serverPort, serverPassword, autoConnect]);\r\n\r\n\treturn (\r\n\t\t<PanelContainer>\r\n\t\t\t<InputSection>\r\n\t\t\t\t<InputSubheader>OBS Configuration</InputSubheader>\r\n\t\t\t\t<InputText>\r\n\t\t\t\t\tTo use this functionality, go to <strong>OBS</strong>, then <strong>Tools</strong>, then <strong>WebSocket Server Settings</strong>.\r\n\t\t\t\t\tSelect <strong>Enable WebSocket Server</strong>, then copy everything in <strong>Show Connect Info</strong> here.\r\n\t\t\t\t\tMake sure to click <strong>Apply</strong> in OBS afterwards.\r\n\t\t\t\t</InputText>\r\n\t\t\t\t<InputRow>\r\n\t\t\t\t\t<InputLabel>Server IP</InputLabel>\r\n\t\t\t\t\t<input type=\"text\" value={serverIp} onChange={(event) => { setServerIp(event.target.value); }} />\r\n\t\t\t\t</InputRow>\r\n\t\t\t\t<InputRow>\r\n\t\t\t\t\t<InputLabel>Server Port</InputLabel>\r\n\t\t\t\t\t<input type=\"text\" value={serverPort} onChange={(event) => { setServerPort(event.target.value); }} />\r\n\t\t\t\t</InputRow>\r\n\t\t\t\t<InputRow>\r\n\t\t\t\t\t<InputLabel>Server Password</InputLabel>\r\n\t\t\t\t\t<input type=\"password\" value={serverPassword} onChange={(event) => { setServerPassword(event.target.value); }} />\r\n\t\t\t\t</InputRow>\r\n\t\t\t\t<InputRow>\r\n\t\t\t\t\t<InputLabel>Connect on Launch</InputLabel>\r\n\t\t\t\t\t<InputCheckbox $checked={autoConnect} onClick={() => setAutoConnect(!autoConnect) } />\r\n\t\t\t\t</InputRow>\r\n\t\t\t</InputSection>\r\n\t\t\t<InputButton onClick={() => { updateObsSettings(); }}>Save</InputButton>\r\n\t\t\t<InputSection>\r\n\t\t\t\t<InputSubheader>OBS Connection</InputSubheader>\r\n\t\t\t</InputSection>\r\n\t\t\t{statusText && (\r\n\t\t\t\t<ErrorText>{statusText}</ErrorText>\r\n\t\t\t)}\r\n\t\t\t<InputButton disabled={connected} onClick={() => { obsSettings && setObsConnection(true, obsSettings); }}>{connected ? 'Connected' : 'Connect'}</InputButton>\r\n\t\t</PanelContainer>\r\n\t)\r\n}\r\n\r\nconst PanelContainer = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n`;\r\n\r\nconst root = createRoot(document.getElementById('root')!);\r\nroot.render(<OBSSettings />);",null,null,null,null,"function klona(val) {\n\tvar k, out, tmp;\n\n\tif (Array.isArray(val)) {\n\t\tout = Array(k=val.length);\n\t\twhile (k--) out[k] = (tmp=val[k]) && typeof tmp === 'object' ? klona(tmp) : tmp;\n\t\treturn out;\n\t}\n\n\tif (Object.prototype.toString.call(val) === '[object Object]') {\n\t\tout = {}; // null\n\t\tfor (k in val) {\n\t\t\tif (k === '__proto__') {\n\t\t\t\tObject.defineProperty(out, k, {\n\t\t\t\t\tvalue: klona(val[k]),\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tout[k] = (tmp=val[k]) && typeof tmp === 'object' ? klona(tmp) : tmp;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\treturn val;\n}\n\nexports.klona = klona;",null,null,"import NodeCG from '@nodecg/types';\r\nimport { useCallback, useEffect, useState } from 'react';\r\n\r\ntype ConnectionOptions = { onConnect?: () => void, onDisconnect?: () => void}\r\n\r\nexport const useObsConnectionStatus = (nodecg: NodeCG.ClientAPI, options?: ConnectionOptions) => {\r\n\tconst [ connected, setConnected ] = useState(false);\r\n\r\n\tconst onConnectionStatus = (value: {isConnected: boolean }) => {\r\n\t\tsetConnected(value.isConnected);\r\n\r\n\t\tif(options) {\r\n\t\t\tif(options.onConnect && value.isConnected) {\r\n\t\t\t\toptions.onConnect();\r\n\t\t\t}\r\n\r\n\t\t\tif(options.onDisconnect && !value.isConnected) {\r\n\t\t\t\toptions.onDisconnect();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tnodecg.listenFor('obsConnectionStatus', onConnectionStatus);\r\n\r\n\t\treturn () => {\r\n\t\t\tnodecg.unlisten('obsConnectionStatus', onConnectionStatus);\r\n\t\t}\r\n\t}, []);\r\n\r\n\treturn connected;\r\n}"],"names":[],"version":3,"file":"obssettings.2cbf19a2.js.map","sourceRoot":"../"}