{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,iDAAgB0B;AAnBhB;;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,MAAMN,qBAA8B;IACnCC,UAAU;IACVC,YAAY;IACZC,gBAAgB;IAChBC,aAAa;AACd;AAEA,MAAMC,oBAAoB;AAEnB,SAASC;IAEf,MAAM,CAAEC,aAAaC,eAAgB,GAAGd,CAAAA,GAAAA,wBAAY,AAAZA,EAAsB,eAAe;QAC5Ee,QAAQ;QACRC,cAAcV;IACf;IAEA,MAAM,CAAEW,sBAAsBC,wBAAyB,GAAG5B,CAAAA,GAAAA,eAAQ,AAARA,EAAkBgB;IAE5E,MAAM,CAAEa,YAAYC,cAAe,GAAG9B,CAAAA,GAAAA,eAAQ,AAARA,EAAS;IAE/C,MAAM+B,eAAelC,CAAAA,GAAAA,kBAAW,AAAXA,EAAY;QAChCiC,cAAc;IACf,GAAG,EAAE;IAEL,MAAME,YAAYpB,CAAAA,GAAAA,6BAAsB,AAAtBA,EAAuBqB,QAAQ;QAAEF,cAAcA;IAAY;IAE7E,MAAMG,mBAAmBrC,CAAAA,GAAAA,kBAAW,AAAXA,EAAY,CAACsC,SAAkBC;QACvD,IAAG,CAACA,UAAU;QAEdN,cAAcT;QAEdY,OAAOI,WAAW,CAAC,oBAAoB;YAAEF,SAASA;YAASC,UAAUA;QAAS,GAC5EE,IAAI,CAAC;YACL,2BAAA;YACAR,cAAc;QACf,GAAGS,KAAK,CAAC,CAACC;YAETE,QAAQC,GAAG,CAACH;YAEZ,6BAAA;YACA,IAAGA,MAAMI,OAAO,CAACC,QAAQ,CAAC,iBACzBf,cAAc;iBAEV,IAAGU,MAAMI,OAAO,CAACC,QAAQ,CAAC,cAC9Bf,cAAc;iBAEV,IAAGU,MAAMI,OAAO,CAACC,QAAQ,CAAC,+BAC9Bf,cAAc;iBAEV,IAAGU,MAAMI,OAAO,CAACC,QAAQ,CAAC,2BAC9Bf,cAAc;iBAEV,IAAGU,MAAMI,OAAO,CAACC,QAAQ,CAAC,mBAC9Bf,cAAc;iBAEV,IAAG,CAACU,MAAMI,OAAO,IAAIJ,MAAMI,OAAO,KAAK,IAC3Cd,cAAc,CAAA,kDAAA,CAAoD;iBAGlEA,cAAc,CAAA,uBAAA,EAA0BU,MAAMI,OAAO,CAAA,CAAE;QAGzD;IACF,GAAG,EAAE;IAEL9C,CAAAA,GAAAA,gBAAS,AAATA,EAAU;QACTmC,OAAOa,aAAa,CAAU,eAAgBC,CAAAA;YAC7C,IAAG,CAACA,SAAS;YAEb,IAAG,CAACf,aAAae,QAAQ3B,WAAW,EACnCc,iBAAiB,MAAMa;QAEzB;IACD;IAEAjD,CAAAA,GAAAA,gBAAS,AAATA,EAAU;QACT,IAAG,CAACyB,aAAa;QAEjBK,wBAAwBd,CAAAA,GAAAA,iBAAS,AAATA,EAAUS;IACnC,GAAG;QAACA;KAAY;IAEhB,MAAMyB,cAAcnD,CAAAA,GAAAA,kBAAW,AAAXA,EAAY;QAC/B2B,eAAeG;IAChB,GAAG;QAACA;QAAsBH;KAAe;IAEzC,MAAMyB,oBAAoBlD,CAAAA,GAAAA,cAAO,AAAPA,EAAQ;QACjC,OAAO,CAACgB,CAAAA,GAAAA,eAAO,AAAPA,EAAQQ,aAAaI;IAC9B,GAAG;QAACJ;QAAaI;KAAqB;IAEtC,qBACC,yCAAC;;;;;;;qBACA,yCAAC,CAAA,GAAA,oCAAiB,AAAjB;QAAkB,OAAM;;;;;;;qBACxB,yCAAC;;;;;;;qBACA,yCAAC;;;;;;;OAAE,mDAAiC,yCAAC;;;;;;;OAAO,QAAY,yBAAO,yCAAC;;;;;;;OAAO,UAAc,yBAAO,yCAAC;;;;;;;OAAO,8BAAkC,oBACtI,yCAAC;;;;;;;OAAE,yBAAO,yCAAC;;;;;;;OAAO,4BAAgC,4CAA0B,yCAAC;;;;;;;OAAO,sBAA0B,yBAC9G,yCAAC;;;;;;;OAAE,iFAA+D,yCAAC;;;;;;;OAAO,cAAkB,2BAAS,yCAAC;;;;;;;OAAO,cAAkB,oBAC/H,yCAAC;;;;;;;OAAE,oCAAkB,yCAAC;;;;;;;OAAO,mBAAuB,gDACpD,yCAAC;;;;;;;OAAE,uDAAqC,yCAAC;;;;;;;OAAO,UAAc,uCAE/D,yCAAC,CAAA,GAAA,eAAO,AAAP;QAAQ,kBAAiB;;;;;;;qBACzB,yCAAC,CAAA,GAAA,gBAAQ,AAAR;QAAS,SAAA;;;;;;;qBACT,yCAAC;;;;;;;qBAAO,yCAAC,CAAA,GAAA,YAAI,AAAJ;;;;;;;OAAK,6BACd,yCAAC,CAAA,GAAA,aAAK,AAAL;QAAM,MAAK;QACX,SAAA;QACA,OAAOA,qBAAqBV,QAAQ;QACpC,UAAWiC,CAAAA,QAAUtB,wBAAyBuB,CAAAA;gBAAsB,OAAO;oBAAE,GAAGA,eAAe;oBAAElC,UAAUiC,MAAME,MAAM,CAACC,KAAvBpC;gBAA6B;YAAC;;;;;;;uBAEjI,yCAAC,CAAA,GAAA,gBAAQ,AAAR;QAAS,SAAA;;;;;;;qBACT,yCAAC;;;;;;;qBAAO,yCAAC,CAAA,GAAA,YAAI,AAAJ;;;;;;;OAAK,+BACd,yCAAC,CAAA,GAAA,aAAK,AAAL;QAAM,MAAK;QACX,SAAA;QACA,OAAOU,qBAAqBT,UAAU;QACtC,UAAWgC,CAAAA,QAAUtB,wBAAyBuB,CAAAA;gBAAsB,OAAO;oBAAE,GAAGA,eAAe;oBAAEjC,YAAYgC,MAAME,MAAM,CAACC,KAAzBnC;gBAA+B;YAAC;;;;;;;wBAGpI,yCAAC,CAAA,GAAA,gBAAQ,AAAR;QAAS,SAAA;;;;;;;qBACT,yCAAC;;;;;;;qBAAO,yCAAC,CAAA,GAAA,YAAI,AAAJ;;;;;;;OAAK,mCACd,yCAAC,CAAA,GAAA,aAAK,AAAL;QAAM,MAAK;QACX,SAAA;QACA,OAAOS,qBAAqBR,cAAc;QAC1C,UAAW+B,CAAAA,QAAUtB,wBAAyBuB,CAAAA;gBAAsB,OAAO;oBAAE,GAAGA,eAAe;oBAAEhC,gBAAgB+B,MAAME,MAAM,CAACC,KAA7BlC;gBAAmC;YAAC;;;;;;;uBAEvI,yCAAC,CAAA,GAAA,WAAG,AAAH;;;;;;;qBACA,yCAAC,CAAA,GAAA,YAAI,AAAJ;;;;;;;OAAK,oCACN,yCAAC,CAAA,GAAA,gBAAQ,AAAR;QAAS,UAAUQ,qBAAqBP,WAAW;QAAE,SAAS,IAAMQ,wBAAyBuB,CAAAA;gBAAsB,OAAO;oBAAE,GAAGA,eAAe;oBAAE/B,aAAa,CAAC+B,gBAAgB/B,WAA9BA;gBAA0C;YAAC;;;;;;;wBAG9L,yCAAC,CAAA,GAAA,eAAO,AAAP;QAAQ,SAAQ;;;;;;;qBAChB,yCAAC,CAAA,GAAA,kBAAU,AAAV;QAAW,SAAS;QAAM,WAAW6B,oBAAoB,aAAa;QAAQ,SAAS;YAAQD;QAAe;;;;;;;OAAIC,oBAAoB,iBAAkB,yBACzJ,yCAAC,CAAA,GAAA,kBAAU,AAAV;QACA,SAAS;QACT,UAAUjB;QACV,WAAU;QACV,SAAS,IAAMT,eAAeW,iBAAiB,MAAMX;;;;;;;OAAeS,YAAY,sBAAsB,oBAEvGH,4BACA,yCAAC,CAAA,GAAA,WAAG,AAAH;QAAI,QAAO;;;;;;;qBAAW,yCAAC,CAAA,GAAA,YAAI,AAAJ;QAAK,WAAWA,eAAeR,oBAAoB,UAAU;;;;;;;OAAQQ;AAIjG;AAEA,MAAMyB,iBAAiBrD,CAAAA,GAAAA,gCAAM,AAANA,EAAOsD,GAAG,CAAAC,UAAA,CAAjC;IAAiCC,aAAAA;IAAAC,aAAAA;AAAA,GAAA;IAAA;CAAA;AAUjC,MAAMC,OAAOzD,CAAAA,GAAAA,kBAAU,AAAVA,EAAW0D,SAASC,cAAc,CAAC;AAChDF,KAAKG,MAAM,eAAC,yCAAC;;;;;;;;;;;;uDCxJAjD;AAXb;;AACA;;AACA;AACA;AAQO,MAAMA,oBAAsDA,CAAC,EAAEsD,KAAK,EAAEE,QAAQ,EAAEE,QAAAA,EAAU;IAChG,MAAM,CAACE,WAAWC,aAAa,GAAG1E,CAAAA,GAAAA,eAAQ,AAARA,EAAS;IAE3C,qBACC,yCAAC;QAAU,WAAWuE;;;;;;;qBACrB,yCAAC;QAAO,WAAWA;;;;;;;qBAClB,yCAAC;;;;;;;OACCJ,sBAEF,yCAAC,CAAA,GAAA,yBAAiB,AAAjB;QAAkB,SAAS;YAAQO,aAAa,CAACD;QAAY;;;;;;;OAC5DA,0BAAa,yCAAC,CAAA,GAAA,iBAAS,AAAT;;;;;;;uBAAiB,yCAAC,CAAA,GAAA,eAAO,AAAP;;;;;;;UAGlC,CAACA,2BAAe,yCAAC;QAAQ,WAAWF;;;;;;;OAAU,KAAEF,UAAS;AAG7D;AAEA,MAAMM,YAAY1E,CAAAA,GAAAA,gCAAM,AAANA,EAAOsD,GAAG,CAAAC,UAAA,CAA5B;IAA4BC,aAAAA;IAAAC,aAAAA;AAAA,GAAA;IAAA;IAAA;CAAA,EAKO,CAAC,EAAEkB,SAAAA,EAAW,GAAKA,YAAY,CAAA,CAAA,EAAIA,UAAS,CAAE,GAAG,CAAA,CAAE;AAGtF,MAAMC,SAAS5E,CAAAA,GAAAA,gCAAM,AAANA,EAAOsD,GAAG,CAAAC,UAAA,CAAzB;IAAyBC,aAAAA;IAAAC,aAAAA;AAAA,GAAA;IAAA;IAAA;IAAA;CAAA,EASU,CAAC,EAAEkB,SAAAA,EAAW,GAAKA,YAAY,CAAA,CAAA,EAAIA,UAAS,CAAE,GAAG,CAAA,CAAE,EAClD,CAAC,EAAEA,SAAAA,EAAW,GAAKA,YAAY,CAAA,EAAGA,UAAS,CAAA,CAAG,GAAG,CAAA,CAAE;AAGvF,MAAME,QAAQ7E,CAAAA,GAAAA,gCAAM,AAANA,EAAOsD,GAAG,CAAAC,UAAA,CAAxB;IAAwBC,aAAAA;IAAAC,aAAAA;AAAA,GAAA;IAAA;CAAA;AAWxB,MAAMqB,UAAU9E,CAAAA,GAAAA,gCAAM,AAANA,EAAOsD,GAAG,CAAAC,UAAA,CAA1B;IAA0BC,aAAAA;IAAAC,aAAAA;AAAA,GAAA;IAAA;IAAA;CAAA,EAIU,CAAC,EAAEkB,SAAAA,EAAW,GAAKA,YAAY,CAAA,EAAGA,UAAS,CAAA,CAAG,GAAG,CAAA,CAAE","sources":["src/dashboard/OBSSettings.tsx","src/dashboard/components/CollapseContainer.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport styled from 'styled-components'\r\nimport { createRoot } from 'react-dom/client';\r\nimport { Checkbox, GridRow, ButtonWide, Fieldset, Text, Input, Row } from './components/Layout';\r\nimport { useReplicant } from '@nodecg/react-hooks';\r\nimport { ObsData } from 'schemas/obsData';\r\nimport { useObsConnectionStatus } from '../helpers/hooks'\r\nimport { CollapseContainer } from './components/CollapseContainer';\r\nimport { cloneDeep, isEqual } from 'lodash';\r\n\r\nconst defaultObsSettings: ObsData = {\r\n\tserverIp: \"localhost\",\r\n\tserverPort: \"4455\",\r\n\tserverPassword: \"\",\r\n\tautoConnect: false\r\n}\r\n\r\nconst connectingMessage = \"Connecting...\";\r\n\r\nexport function OBSSettings() {\r\n\t\r\n\tconst [ obsSettings, setObsSettings ] = useReplicant<ObsData>('obssettings', { \r\n\t\tbundle: 'squidwest-layout-controls',\r\n\t\tdefaultValue: defaultObsSettings\r\n\t});\r\n\r\n\tconst [ dashboardObsSettings, setDashboardObsSettings ] = useState<ObsData>(defaultObsSettings);\r\n\r\n\tconst [ statusText, setStatusText ] = useState(\"\");\r\n\r\n\tconst onDisconnect = useCallback(() => {\r\n\t\tsetStatusText(\"OBS was disconnected.\");\r\n\t}, []);\r\n\r\n\tconst connected = useObsConnectionStatus(nodecg, { onDisconnect: onDisconnect});\r\n\r\n\tconst setObsConnection = useCallback((connect: boolean, settings: ObsData) => {\r\n\t\tif(!settings) return;\r\n\r\n\t\tsetStatusText(connectingMessage);\r\n\r\n\t\tnodecg.sendMessage('setObsConnection', { connect: connect, settings: settings })\r\n\t\t\t.then(() => {\r\n\t\t\t\t//OBS Connection Successful\r\n\t\t\t\tsetStatusText(\"\");\r\n\t\t\t}).catch((error: Error) => {\r\n\r\n\t\t\t\tconsole.log(error);\r\n\r\n\t\t\t\t//Simplify some common errors\r\n\t\t\t\tif(error.message.includes(\"ECONNREFUSED\")) {\r\n\t\t\t\t\tsetStatusText(\"OBS Connection Failed: Failed to connect. Is OBS open with the WebSocket Server enabled?\");\r\n\t\t\t\t}\r\n\t\t\t\telse if(error.message.includes(\"ETIMEDOUT\")) {\r\n\t\t\t\t\tsetStatusText(\"OBS Connection Failed: Timed out. Double check your information matches what is in OBS!\");\r\n\t\t\t\t}\r\n\t\t\t\telse if(error.message.includes(\"authentication is required\")) {\r\n\t\t\t\t\tsetStatusText(\"OBS Connection Failed: Missing authentication. Check that you've filled out the password field!\");\r\n\t\t\t\t}\r\n\t\t\t\telse if(error.message.includes(\"Authentication failed.\")) {\r\n\t\t\t\t\tsetStatusText(\"OBS Connection Failed: Authentication failed. Verify that your password matches the one in OBS!\");\r\n\t\t\t\t}\r\n\t\t\t\telse if(error.message.includes(\"socket hang up\")) {\r\n\t\t\t\t\tsetStatusText(\"OBS Connection Failed: Socket hang up. Is the port number conflicting?\");\r\n\t\t\t\t}\r\n\t\t\t\telse if(!error.message || error.message === \"\") {\r\n\t\t\t\t\tsetStatusText(`OBS Connection Failed: Unknown Error. Is OBS Open?`);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsetStatusText(`OBS Connection Failed: ${error.message}`);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t})\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tnodecg.readReplicant<ObsData>('obssettings', (obsData) => {\r\n\t\t\tif(!obsData) return;\r\n\r\n\t\t\tif(!connected && obsData.autoConnect) {\r\n\t\t\t\tsetObsConnection(true, obsData);\r\n\t\t\t}\r\n\t\t})\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tif(!obsSettings) return;\r\n\r\n\t\tsetDashboardObsSettings(cloneDeep(obsSettings));\r\n\t}, [obsSettings]);\r\n\r\n\tconst saveChanges = useCallback(() => {\r\n\t\tsetObsSettings(dashboardObsSettings);\r\n\t}, [dashboardObsSettings, setObsSettings]);\r\n\r\n\tconst hasUnsavedChanges = useMemo(() => {\r\n\t\treturn !isEqual(obsSettings, dashboardObsSettings);\r\n\t}, [obsSettings, dashboardObsSettings]);\r\n\r\n\treturn (\r\n\t\t<PanelContainer>\r\n\t\t\t<CollapseContainer title=\"OBS Configuration\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>To use this functionality, go to <strong>OBS</strong>, then <strong>Tools</strong>, then <strong>WebSocket Server Settings</strong>.</p>\r\n\t\t\t\t\t<p>Select <strong>Enable WebSocket Server</strong>, then copy everything in <strong>Show Connect Info</strong> here.</p>\r\n\t\t\t\t\t<p>If OBS is being hosted on this computer, you can instead enter <strong>localhost</strong> for the <strong>Server IP</strong>.</p>\r\n\t\t\t\t\t<p>This tool expects <strong>IPv4 addresses</strong> and will not work with IPv6.</p>\r\n\t\t\t\t\t<p>Once you're done, make sure to click <strong>Apply</strong> in OBS afterwards.</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<GridRow $templateColumns='1fr 0.5fr'>\r\n\t\t\t\t\t<Fieldset $expand>\r\n\t\t\t\t\t\t<legend><Text>Server IP</Text></legend>\r\n\t\t\t\t\t\t<Input type=\"text\" \r\n\t\t\t\t\t\t\t$expand\r\n\t\t\t\t\t\t\tvalue={dashboardObsSettings.serverIp} \r\n\t\t\t\t\t\t\tonChange={(event) => setDashboardObsSettings((currentSettings) => { return { ...currentSettings, serverIp: event.target.value }}) }/>\r\n\t\t\t\t\t</Fieldset>\r\n\t\t\t\t\t<Fieldset $expand>\r\n\t\t\t\t\t\t<legend><Text>Server Port</Text></legend>\r\n\t\t\t\t\t\t<Input type=\"text\" \r\n\t\t\t\t\t\t\t$expand\r\n\t\t\t\t\t\t\tvalue={dashboardObsSettings.serverPort} \r\n\t\t\t\t\t\t\tonChange={(event) => setDashboardObsSettings((currentSettings) => { return { ...currentSettings, serverPort: event.target.value }}) }/>\r\n\t\t\t\t\t</Fieldset>\r\n\t\t\t\t</GridRow>\r\n\t\t\t\t<Fieldset $expand>\r\n\t\t\t\t\t<legend><Text>Server Password</Text></legend>\r\n\t\t\t\t\t<Input type=\"password\" \r\n\t\t\t\t\t\t$expand\r\n\t\t\t\t\t\tvalue={dashboardObsSettings.serverPassword} \r\n\t\t\t\t\t\tonChange={(event) => setDashboardObsSettings((currentSettings) => { return { ...currentSettings, serverPassword: event.target.value }}) }/>\r\n\t\t\t\t</Fieldset>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Text>Connect on Launch</Text>\r\n\t\t\t\t\t<Checkbox $checked={dashboardObsSettings.autoConnect} onClick={() => setDashboardObsSettings((currentSettings) => { return { ...currentSettings, autoConnect: !currentSettings.autoConnect }}) } />\r\n\t\t\t\t</Row>\r\n\t\t\t</CollapseContainer>\r\n\t\t\t<GridRow $height='56px'>\r\n\t\t\t\t<ButtonWide $expand={true} $colorTag={hasUnsavedChanges ? 'dark-red' : 'pink'} onClick={() => { saveChanges(); }}>{hasUnsavedChanges ? 'Save Changes' :  'Saved!'}</ButtonWide>\r\n\t\t\t\t<ButtonWide \r\n\t\t\t\t\t$expand={true} \r\n\t\t\t\t\tdisabled={connected} \r\n\t\t\t\t\t$colorTag='teal' \r\n\t\t\t\t\tonClick={() => obsSettings && setObsConnection(true, obsSettings)}>{connected ? 'Connected to OBS!' : 'Connect to OBS'}</ButtonWide>\r\n\t\t\t</GridRow>\r\n\t\t\t{statusText && (\r\n\t\t\t\t<Row $align='flex-end'><Text $colorTag={statusText === connectingMessage ? 'white' : 'red'}>{statusText}</Text></Row>\r\n\t\t\t)}\r\n\t\t</PanelContainer>\r\n\t)\r\n}\r\n\r\nconst PanelContainer = styled.div`\r\n\tposition: relative;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tgap: 5px;\r\n\tpadding: 5px 10px 12px;\r\n`;\r\n\r\nconst root = createRoot(document.getElementById('root')!);\r\nroot.render(<OBSSettings />);","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { TransparentButton } from './Layout';\r\nimport { CaretDown, CaretUp } from '@phosphor-icons/react'\r\n\r\ninterface CollapseContainerProps {\r\n\ttitle: string | React.ReactElement;\r\n\tchildren: React.ReactNode;\r\n\tcolorTag?: string;\r\n}\r\n\r\nexport const CollapseContainer: React.FC<CollapseContainerProps> = ({ title, children, colorTag }) => {\r\n\tconst [collapsed, setCollapsed] = useState(true);\r\n\r\n\treturn (\r\n\t\t<Container $colorTag={colorTag}>\r\n\t\t\t<Header $colorTag={colorTag}>\r\n\t\t\t\t<Front>\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Front>\r\n\t\t\t\t<TransparentButton onClick={() => { setCollapsed(!collapsed); }}>\r\n\t\t\t\t\t{collapsed ? (<CaretDown />) : (<CaretUp />)}\r\n\t\t\t\t</TransparentButton>\r\n\t\t\t</Header>\r\n\t\t\t{!collapsed && ( <Content $colorTag={colorTag}> {children} </Content> )}            \r\n\t\t</Container>\r\n\t)\r\n};\r\n\r\nconst Container = styled.div<{ $colorTag?: string }>`\r\n\tposition: relative;\r\n\r\n\twidth: 100%;\r\n\tborder-radius: 0.5rem;\r\n\tbackground-color: var(--collapse${({ $colorTag }) => $colorTag ? `-${$colorTag}` : ``});\r\n`;\r\n\r\nconst Header = styled.div<{ $colorTag?: string }>`\r\n\tposition: relative;\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n\tjustify-content: space-between;\r\n\talign-items: center;\r\n\tpadding: 3px 8px;\r\n\tgap: 5px;\r\n\tborder-radius: 0.5rem;\r\n\tbackground-color: var(--collapse${({ $colorTag }) => $colorTag ? `-${$colorTag}` : ``});\r\n\tborder: 3px solid var(--collapse-${({ $colorTag }) => $colorTag ? `${$colorTag}-` : ``}border);\r\n`;\r\n\r\nconst Front = styled.div`\r\n\tposition: relative;\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n\tjustify-content: flex-start;\r\n\talign-items: center;\r\n\tgap: 5px;\r\n\tfont-size: 1.3rem;\r\n\tfont-weight: 700;\r\n`;\r\n\r\nconst Content = styled.div<{ $colorTag?: string }>`\r\n\tposition: relative;\t\r\n\tmargin-top: -8px;\r\n\tpadding: 10px 8px 5px;\r\n\tborder: 3px solid var(--collapse-${({ $colorTag }) => $colorTag ? `${$colorTag}-` : ``}border);\r\n\tborder-top: none;\r\n\tborder-radius: 0 0 0.5rem 0.5rem;\r\n`;"],"names":["React","useCallback","useEffect","useMemo","useState","styled","createRoot","Checkbox","GridRow","ButtonWide","Fieldset","Text","Input","Row","useReplicant","ObsData","useObsConnectionStatus","CollapseContainer","cloneDeep","isEqual","defaultObsSettings","serverIp","serverPort","serverPassword","autoConnect","connectingMessage","OBSSettings","obsSettings","setObsSettings","bundle","defaultValue","dashboardObsSettings","setDashboardObsSettings","statusText","setStatusText","onDisconnect","connected","nodecg","setObsConnection","connect","settings","sendMessage","then","catch","error","Error","console","log","message","includes","readReplicant","obsData","saveChanges","hasUnsavedChanges","event","currentSettings","target","value","PanelContainer","div","withConfig","displayName","componentId","root","document","getElementById","render","TransparentButton","CaretDown","CaretUp","CollapseContainerProps","title","ReactElement","children","ReactNode","colorTag","FC","collapsed","setCollapsed","Container","$colorTag","Header","Front","Content"],"version":3,"file":"obssettings.2cbf19a2.js.map","sourceRoot":"../"}