{"mappings":"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","sources":["src/dashboard/Time.tsx","src/dashboard/components/TimeDisplay.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components'\r\nimport { createRoot } from 'react-dom/client';\r\nimport { Text } from './components/Layout';\r\nimport { TimeDisplay } from './components/TimeDisplay';\r\nimport { TimeInterval } from '../types/types';\r\nimport { useObsConnectionStatus } from '../helpers/hooks';\r\n\r\nexport function Time() {\r\n\r\n\tconst [breakTime, setBreakTime] = useState<TimeInterval>({ startTime: Date.now() });\r\n\tconst [gameTime, setGameTime] = useState<TimeInterval>({ startTime: Date.now(), endTime: Date.now() });\r\n\tconst [transitionTime, setTransitionTime] = useState<TimeInterval>({ startTime: Date.now() });\r\n\r\n\tconst [currentTime, setCurrentTime] = useState<number>( Date.now() );\r\n\tconst interval = useRef<number | null>(null);\r\n\r\n\tconst connected = useObsConnectionStatus(nodecg);\r\n\r\n\tconst onSceneChange = useCallback((value: { sceneName: string, timeStamp: number}) => {\r\n\t\tif(value.sceneName.includes(\"Game\")) {\r\n\t\t\tsetBreakTime((oldBreakTime) => oldBreakTime.endTime ? oldBreakTime : { ...oldBreakTime, endTime: value.timeStamp })\r\n\t\t\tsetGameTime((oldGameTime) => oldGameTime.endTime ? {startTime: value.timeStamp} : oldGameTime)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsetBreakTime(oldBreakTime => oldBreakTime.endTime ? {startTime: value.timeStamp} : oldBreakTime)\r\n\t\t\tsetGameTime((oldGameTime) => oldGameTime.endTime ? oldGameTime : { ...oldGameTime, endTime: value.timeStamp })\r\n\t\t}\r\n\r\n\t\tsetTransitionTime({ startTime: value.timeStamp });\r\n\t}, []);\r\n\r\n\tconst calcTime = useCallback((interval: TimeInterval) => {\r\n\t\treturn interval.endTime ? interval.endTime - interval.startTime : currentTime - interval.startTime;\r\n\t}, [currentTime]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif(!interval.current) {\r\n\t\t\tinterval.current = window.setInterval(() => {\r\n\t\t\t\tsetCurrentTime(Date.now());\r\n\t\t\t}, 10);\r\n\t\t}\r\n\r\n\t\treturn () => {\r\n\t\t\tif(!interval.current) return;\r\n\r\n\t\t\tclearInterval(interval.current);\r\n\t\t\tinterval.current = null;\r\n\t\t}\r\n\r\n\t}, [interval, setCurrentTime]);\r\n\r\n\tuseEffect(() => {\r\n\t\tnodecg.listenFor('onSceneChange', onSceneChange);\r\n\r\n\t\treturn () => {\r\n\t\t\tnodecg.unlisten('onSceneChange', onSceneChange);\r\n\t\t}\r\n\t});\r\n\r\n\treturn (\r\n\t\t<PanelContainer>\r\n\t\t\t{connected && (\r\n\t\t\t<Wrapper>\r\n\t\t\t\t<TimeDisplay timingName='Time On Break' time={calcTime(breakTime)} />\r\n\t\t\t\t<TimeDisplay timingName='Time On Game' time={calcTime(gameTime)} />\r\n\t\t\t\t<TimeDisplay timingName='Time Since Transition' time={calcTime(transitionTime)} />\t\r\n\t\t\t</Wrapper>\r\n\t\t\t)}\r\n\r\n\t\t\t{!connected && (\r\n\t\t\t<MarginWrapper>\r\n\t\t\t\t<Text>\r\n\t\t\t\t\t<p>OBS is not currently connected!</p>\r\n\t\t\t\t\t<p>This panel provides information on OBS transitions and break timings.</p>\r\n\t\t\t\t\t<p>To use it, go to <strong>2. Settings</strong> and check the <strong>OBS Settings</strong> NodeCG Panel to enable websocket support.</p>\r\n\t\t\t\t</Text>\r\n\t\t\t</MarginWrapper>\r\n\t\t\t)}\r\n\t\t\t\r\n\t\t</PanelContainer>\r\n\t)\r\n}\r\n\r\nconst PanelContainer = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\ttext-align: center;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n\tdisplay: contents;\r\n`;\r\n\r\nconst MarginWrapper = styled.div`\r\n\tmargin: 1.5rem 0.25rem;\r\n\tfont-size: 1.25rem;\r\n`;\r\n\r\nconst root = createRoot(document.getElementById('root')!);\r\nroot.render(<Time />);","\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { formatTimeHMSC } from '../../helpers/utils';\r\n\r\ninterface TimeDisplayProps {\r\n    timingName: string;\r\n\ttime: number;\r\n}\r\n\r\nexport const TimeDisplay: React.FC<TimeDisplayProps> = ({ timingName, time }) => {\r\n\r\n    return (\r\n        <Container>\r\n            <TimeHeader>{timingName}</TimeHeader>\r\n\t\t\t<Time>\r\n\t\t\t\t{formatTimeHMSC(time)}\r\n\t\t\t</Time>\r\n        </Container>\r\n    )\r\n};\r\n\r\nconst Container = styled.div`\r\n    display: contents;\r\n`;\r\n\r\nconst TimeHeader = styled.div`\r\n    font-size: 1.5rem;\r\n    font-weight: 700;\r\n    margin-top: 0.5rem;\r\n`;\r\n\r\nconst Time = styled.div`\r\n\tfont-size: 4rem;\r\n\tfont-weight: 600;\r\n\tfont-family: 'Courier New', Courier, Consolas, monospace;\r\n`;"],"names":["React","useCallback","useEffect","useRef","useState","styled","createRoot","Text","TimeDisplay","TimeInterval","useObsConnectionStatus","Time","breakTime","setBreakTime","startTime","Date","now","gameTime","setGameTime","endTime","transitionTime","setTransitionTime","currentTime","setCurrentTime","interval","connected","nodecg","onSceneChange","value","sceneName","timeStamp","includes","oldBreakTime","oldGameTime","calcTime","current","window","setInterval","clearInterval","listenFor","unlisten","PanelContainer","div","withConfig","displayName","componentId","Wrapper","MarginWrapper","root","document","getElementById","render","formatTimeHMSC","TimeDisplayProps","timingName","time","FC","Container","TimeHeader"],"version":3,"file":"time.6153b083.js.map","sourceRoot":"../"}